input EncounterInput {
  status: EncounterStatusEnum!
  class: EncounterClass!
  patientID: String!
  episodeOfCareID: String
}

type Encounter {
  id: String!
  status: EncounterStatusEnum!
  class: EncounterClass!
  patientID: String!
  episodeOfCareID: String
}

enum EncounterStatusEnum {
  planned
  arrived
  triaged
  in_progress
  onleave
  finished
  cancelled
  entered_in_error
  unknown
}

enum EncounterClass {
  # For now we'll start with ambulatory services(outpatient) only
  ambulatory
  # emergency
  # field
  # home_health
  # inpatient_encounter
  # inpatient_acute
  # inpatient_non_acute
  # pre_op
  # short_stay
  # virtual
}

type Query {
  getEncounter(id: String!): Encounter
  searchEncounters(
    patientID: String!
    status: EncounterStatusEnum
    class: EncounterClass
  ): [Encounter]
}

type Mutation {
  createEncounter(input: EncounterInput!): Encounter
  updateEncounter(id: String!, input: EncounterInput!): Encounter
  startEncounter(episodeID: String!): String!
  endEncounter(encounterID: String!): Boolean!
}
