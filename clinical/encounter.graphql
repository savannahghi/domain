input EncounterInput {
  status: EncounterStatusEnum!
  class: EncounterClass!
  patientID: String!
  episodeOfCareID: String
}

type Encounter {
  id: String!
  status: EncounterStatusEnum!
  class: EncounterClass!
  patient: Patient!
  episodeOfCareID: String
}

enum EncounterStatusEnum {
  planned
  arrived
  triaged
  in_progress
  finished
  cancelled
  
}

enum EncounterClass {
  # For now we'll start with ambulatory services(outpatient) only
  ambulatory
}

type Query {
  getEncounter(id: String!): Encounter
  searchEncounters(
    patientID: String!
    status: EncounterStatusEnum
    class: EncounterClass
  ): [Encounter]
}

type Mutation {
  createEncounter(input: EncounterInput!): Encounter
  updateEncounter(id: String!, input: EncounterInput!): Encounter
  startEncounter(episodeID: String!): String!
  endEncounter(encounterID: String!): Boolean!
}
